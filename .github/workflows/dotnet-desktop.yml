# This workflow will build, publish, and release a .NET project for multiple runtimes.
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET Build, Publish, and Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+' # Trigger on version tags like v1.2.3
  workflow_dispatch:
    inputs:
      dotnet_version:
        description: '.NET SDK のバージョン'
        required: true
        default: '9.0'
        type: string
      target_runtime:
        description: 'ビルド対象のランタイム'
        required: true
        default: 'all'
        type: choice
        options:
          - 'all'
          - 'win-x64'
          - 'win-x86'
          - 'win-arm64'
          - 'linux-x64'
          - 'linux-arm64'
          - 'osx-x64'
          - 'osx-arm64'
          - 'termux-arm64'
          - 'release-push'
      release_tag:
        description: 'リリース用のタグ名 (例: v1.2.3)。`release-push`選択時のみ使用。'
        required: false
        type: string

jobs:
  build-and-publish:
    # ジョブ名にマトリックスのランタイムIDを表示
    name: Build for ${{ matrix.rid }}
    runs-on: ubuntu-latest
    strategy:
      # 失敗したジョブがあっても、他のジョブは継続
      fail-fast: false
      matrix:
        # 'all', 'release-push', またはタグプッシュの場合は全ランタイムを、それ以外は選択されたランタイムをビルド対象にする
        rid: ${{ (startsWith(github.ref, 'refs/tags/') || github.event.inputs.target_runtime == 'all' || github.event.inputs.target_runtime == 'release-push') && fromJSON('["win-x64", "win-x86", "win-arm64", "linux-x64", "linux-arm64", "osx-x64", "osx-arm64"]') || fromJSON(format('["{0}"]', github.event.inputs.target_runtime)) }}
    
    env:
      PROJ: "/home/runner/work/LineageOS_ROM_Downloader/LineageOS_ROM_Downloader/src/LineageOS_ROM_Downloader/LineageOS_ROM_Downloader.csproj"

    steps:
    - name: Checkout repository
      # リポジトリのコードをチェックアウト
      uses: actions/checkout@v4

    - name: Setup .NET SDK
      # 指定されたバージョンの.NET SDKをセットアップ
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ inputs.dotnet_version }}

    - name: Publish application
      # プロジェクトを特定のランタイム向けに発行
      # 出力先もランタイムごとに分ける
      run: dotnet publish $PROJ -c Release -r ${{ matrix.rid }} -o ./publish/${{ matrix.rid }}
      
    - name: Upload Artifact
      # ランタイムごとに個別の成果物としてアップロード
      uses: actions/upload-artifact@v4
      with:
        name: build-output-${{ matrix.rid }}
        path: ./publish/${{ matrix.rid }}
        retention-days: 7 # 成果物の保持期間 (任意)

  build-termux:
    name: Build for Termux (ARM64)
    runs-on: ubuntu-latest
    # Termuxが選択された場合、または全ビルド・リリースの場合に実行
    if: contains(fromJSON('["all", "release-push", "termux-arm64"]'), github.event.inputs.target_runtime) || startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up QEMU
      # 異なるアーキテクチャのDockerイメージを実行するためにQEMUをセットアップ
      uses: docker/setup-qemu-action@v3

    - name: Build using Termux Docker container
      # Termuxのビルド環境を再現したDockerコンテナ内でビルドを実行
      run: |
        docker run --rm --dns 8.8.8.8 -v "$(pwd)":/src termux/termux-docker:aarch64 /bin/bash -c \
        "pkg update -y && \
         pkg install -y dotnet-sdk-9 && \
         cd /src && \
         dotnet publish src/LineageOS_ROM_Downloader/LineageOS_ROM_Downloader.csproj -c Release -r linux-arm64 -o ./publish/termux-arm64"

    - name: Upload Termux Artifact
      uses: actions/upload-artifact@v4
      with:
        name: build-output-termux-arm64
        path: ./publish/termux-arm64
        retention-days: 7

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    # タグがプッシュされた時、または 'release-push' が選択された時のみ実行
    if: startsWith(github.ref, 'refs/tags/') || github.event.inputs.target_runtime == 'release-push'
    # すべてのビルドジョブの完了を待つ
    needs: [build-and-publish, build-termux]
    permissions:
      # GitHub Releasesを作成・編集するために必要
      contents: write

    steps:
    - name: Download all artifacts
      # すべてのビルド成果物をダウンロード
      uses: actions/download-artifact@v4
      with:
        # ダウンロード先ディレクトリ
        path: artifacts/

    - name: Rename executables for release
      # リリース用に実行ファイル名を変更
      run: |
        for dir in artifacts/build-output-*; do
          if [ -d "$dir" ]; then
            rid=$(basename "$dir" | sed 's/build-output-//')
            if [ -f "$dir/LineageOS_ROM_Downloader" ]; then
              mv "$dir/LineageOS_ROM_Downloader" "$dir/LineageOS_ROM_Downloader-$rid"
            elif [ -f "$dir/LineageOS_ROM_Downloader.exe" ]; then
              mv "$dir/LineageOS_ROM_Downloader.exe" "$dir/LineageOS_ROM_Downloader-$rid.exe"
            fi
          fi
        done

    - name: Fail if release_tag is missing on manual trigger
      # 'release-push' 実行時に release_tag が空でないことを確認
      if: github.event.inputs.target_runtime == 'release-push' && github.event.inputs.release_tag == ''
      run: |
        echo "Error: 'release_tag' is required when 'target_runtime' is 'release-push'."
        exit 1

    - name: Create Release and Upload Assets
      # GitHub Releaseを作成し、ビルド成果物をアップロード
      uses: softprops/action-gh-release@v2
      with:
        # 手動リリースの場合は入力値を、タグプッシュの場合はタグ名をタグとして使用
        tag_name: ${{ github.event.inputs.release_tag || github.ref_name }}
        # リリースノートを自動生成
        generate_release_notes: true
        # アップロードするファイルのパスをワイルドカードで指定
        # artifactsディレクトリ内のすべてのファイルを対象とする
        files: artifacts/**/*
